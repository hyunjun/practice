#   https://leetcode.com/problems/greatest-sum-divisible-by-three


from typing import List


class Solution:
    #   Wrong Answer
    def maxSumDivThree0(self, nums: List[int]) -> int:
        if nums is None or not ( 1 <= len(nums) <= 4 * 10 ** 4 ):
            return 0

        def getSum(acc, ns):
            if 0 == len(ns):
                return acc if acc % 3 == 0 else 0
            for i, n in enumerate(ns):
                acc += n
                curRes = getSum(acc, ns[i + 1:])
                if 0 < curRes:
                    return curRes
                acc -= n
            return 0

        return getSum(0, sorted(nums, reverse=True))

    #   Time Limit Exceeded
    def maxSumDivThree1(self, nums: List[int]) -> int:
        if nums is None or not ( 1 <= len(nums) <= 4 * 10 ** 4 ):
            return 0

        self.maxSum = 0
        def getSum(acc, ns):
            if acc + sum(ns) < self.maxSum:
                return
            self.maxSum = max(self.maxSum, acc if acc % 3 == 0 else 0)
            for i, n in enumerate(ns):
                acc += n
                getSum(acc, ns[i + 1:])
                acc -= n

        getSum(0, sorted(nums, reverse=True))

        return self.maxSum

    #   Wrong Answer
    def maxSumDivThree2(self, nums: List[int]) -> int:
        if nums is None or not ( 1 <= len(nums) <= 4 * 10 ** 4 ):
            return 0

        tot, ones, twos = 0, [], []
        for n in nums:
            rest = n % 3
            if rest == 0:
                tot += n
            elif rest == 1:
                ones.append(n)
            elif rest == 2:
                twos.append(n)
        ones, twos = sorted(ones, reverse=True), sorted(twos, reverse=True)

        while len(ones) > 0 or len(twos) > 0:
            cand1 = sum(twos[:3]) if len(twos) >= 3 else 0
            cand2 = sum(ones[:3]) if len(ones) >= 3 else 0
            minLen = min(len(ones), len(twos))
            cand3 = sum(ones[:minLen]) + sum(twos[:minLen])
            maxCand = max(cand1, cand2, cand3)
            print(twos, ones, cand1, cand2, cand3)
            if maxCand == 0:
                break
            elif maxCand == cand1:
                tot += cand1
                twos = twos[3:]
            elif maxCand == cand2:
                tot += cand2
                ones = ones[3:]
            else:
                tot += cand3
                ones, twos = ones[minLen:], twos[minLen:]
        return tot

    #   runtime; 272ms, 81.92%
    #   memory; 17.5MB, 100.00%
    def maxSumDivThree(self, nums: List[int]) -> int:
        if nums is None or not ( 1 <= len(nums) <= 4 * 10 ** 4 ):
            return 0

        tot, ones, twos = sum(nums), [], []
        for n in nums:
            rest = n % 3
            if rest == 1:
                ones.append(n)
            elif rest == 2:
                twos.append(n)
        ones, twos = sorted(ones), sorted(twos)

        while True:
            rest = tot % 3
            if 0 == rest:
                break
            elif 1 == rest:
                minCand1, minCand2 = ones[0] if len(ones) > 0 else float('inf'), twos[0] + twos[1] if len(twos) > 1 else float('inf')
            else:
                minCand1, minCand2 = ones[0] + ones[1] if len(ones) > 1 else float('inf'), twos[0] if len(twos) > 0 else float('inf')
            minCand = min(minCand1, minCand2)
            if minCand == float('inf'):
                return 0
            tot -= minCand
        return tot


s = Solution()
data = [([3, 6, 5, 1, 8], 18),
        ([4], 0),
        ([1, 2, 3, 4, 4], 12),
        ([4, 1, 5, 3, 1], 12),
        ([3006, 4409, 9666, 5333, 4803, 9775, 1866, 9679, 1783, 529, 7265, 8443, 5928, 2963, 8403, 5092, 4745, 4035, 575, 1208, 1863, 9966, 572, 9491, 9021, 8856, 1663, 8411, 331, 1319, 9071, 3318, 4709, 2946, 7041, 849, 1839, 6202, 2236, 7799, 6796, 7901, 2605, 4058, 7273, 9571, 2323, 744, 5930, 2711, 6405, 3406, 5293, 129, 9172, 7165, 7490, 4786, 8913, 1987, 741, 9614, 4980, 4331, 8613, 7119, 5764, 6285, 6584, 9989, 6586, 5737, 729, 5780, 8052, 1231, 7391, 3137, 9948, 6834, 3450, 975, 7943, 4073, 627, 6977, 3398, 133, 9370, 1424, 5167, 3451, 452, 4368, 2013, 8263, 9359, 1503, 5832, 6927, 3202, 3913, 1289, 7147, 3407, 8467, 9298, 819, 9233, 5341, 6797, 1709, 1369, 2480, 3291, 238, 7754, 4978, 4124, 3083, 1720, 3046, 8791, 3175, 6259, 2612, 1315, 8575, 8424, 9093, 2716, 7772, 1156, 2140, 3661, 6648, 3277, 3988, 2628, 808, 3197, 840, 2495, 5875, 3369, 1765, 7892, 9462, 2347, 9167, 4911, 4862, 6051, 3740, 8850, 5390, 2037, 7741, 5703, 6677, 3534, 7760, 6858, 9935, 6935, 5510, 8983, 2016, 1359, 5429, 5598, 8562, 6060, 9978, 9212, 6188, 6856, 1907, 4692, 3804, 6718, 2396, 5995, 6010, 5326, 3757, 4537, 7074, 1190, 9248, 1878, 1043, 339, 4579, 9616, 6508, 2513, 6163, 6791, 1510, 5863, 3656, 3322, 5813, 8386, 9868, 1595, 2870, 4720, 5241, 5085, 5857, 6376, 5083, 7778, 4110, 7745, 4828, 1726, 1773, 1674, 7279, 8720, 2944, 6846, 9519, 9968, 9541, 411, 6390, 9165, 8088, 4876, 1199, 275, 7226, 978, 1990, 519, 8006, 6784, 2450, 9245, 4215, 7622, 7285, 1208, 8407, 4717, 7993, 6939, 5930, 2267, 7717, 6858, 4897, 4368, 993, 6030, 3815, 2698, 5585, 1251, 5383, 496, 8671, 1492, 3604, 1982, 3380, 6669, 5199, 8271, 3146, 9968, 1977, 4139, 2626, 5818, 4240, 3596, 9839, 2237, 7516, 6939, 3077, 904, 9287, 2006, 4499, 9681, 3227, 7250, 1999, 2567, 792, 3220, 8354, 3797, 5357, 289, 9059, 5406, 2509, 6312, 6961, 5400, 9569, 5491, 143, 5486, 6988, 5121, 1903, 4766, 7284, 7690, 5102, 5367, 6632, 2275, 4214, 8578, 2154, 5368, 2196, 1686, 6269, 7157, 904, 368, 9942, 704, 9911, 127, 9951, 8210, 3721, 6551, 5295, 3250, 9637, 1322, 1133, 2955, 447, 2989, 4026, 3778, 2036, 9619, 1942, 9511, 2535, 1000, 3952, 4307, 9106, 2369, 3721, 8639, 8059, 4429, 9965, 6249, 1168, 3903, 806, 2398, 539, 6061, 1020, 3158, 8077, 2116, 7579, 8479, 8970, 200, 6508, 6714, 8976, 7900, 4873, 7920, 5867, 6984, 7741, 6081, 178, 6379, 2247, 1914, 2986, 9035, 1861, 5335, 2531, 4191, 9091, 5299, 7959, 6250, 3276, 7374, 1811, 4039, 5214, 8548, 5097, 8031, 8619, 7980, 7306, 3480, 2899, 56, 9158, 4871, 4025, 5299, 5464, 8095, 6461, 7229, 7611, 6430, 1974, 815, 5778, 1883, 1258, 2812, 964, 5367, 9707, 466, 7542, 9796, 9348, 8309, 2332, 4893, 4884, 9213, 9405, 8997, 7163, 6942, 745, 1208, 3453, 7746, 1917, 5759, 4262, 1031, 6111, 3483, 1531, 4578, 183, 734, 2270, 1534, 7145, 3808, 9147, 7750, 5313, 9901, 8277, 7375, 4927, 2042, 7830, 8103, 4921, 3517, 7175, 8122, 1124, 5838, 8852, 1419, 3000, 3090, 9864, 1279, 7184, 8804, 5108, 4215, 9957, 5984, 8005, 1197, 5492, 1978, 5805, 3090, 3732, 4138, 8269, 1676, 7743, 1498, 4146, 8801, 5291, 4986, 5014, 128, 1964, 6443, 7755, 8669, 3423, 3428, 5920, 8219, 414, 2406, 8868, 3406, 7712, 881, 5474, 9494, 4140, 4563, 1687, 2459, 4657, 3948, 1735, 8986, 8106, 2326, 1527, 8388, 4830, 4426, 5274, 3747, 534, 9446, 8869, 2956, 3741, 8486, 2216, 707, 9569, 4139, 5648, 7529, 7271, 239, 5662, 3169, 6612, 9036, 3654, 9178, 3959, 3787, 5313, 7976, 2030, 6269, 8274, 8461, 6636, 2364, 5459, 4751, 139, 9647, 1831, 8380, 9984, 4501, 7543, 7144, 2372, 159, 1607, 3625, 6212, 8132, 7813, 1189, 1835, 4650, 9270, 627, 7156, 9660, 9274, 4541, 2810, 1875, 3938, 6046, 9612, 3021, 3924, 5764, 4862, 7149, 9850, 9900, 4310, 5680, 330, 7726, 3209, 3630, 9224, 8742, 5252, 6524, 5889, 9044, 9839, 7036, 8619, 9448, 5419, 3010, 8066, 752, 6402, 4277, 3648, 8481, 2448, 3362, 7077, 6987, 8231, 1521, 9519, 5201, 2618, 1839, 464, 8098, 3362, 5013, 2917, 4356, 6655, 3719, 7070, 155, 1300, 5940, 8261, 7176, 7429, 1685, 7763, 7641, 2869, 6911, 4955, 4462, 8420, 7181, 5389, 8558, 6542, 8666, 4606, 5473, 8662, 1479, 8191, 8194, 8008, 572, 3908, 7859, 9210, 7877, 2050, 1736, 9472, 5556, 6591, 4385, 3694, 2166, 6058, 352, 8421, 9349, 5466, 9121, 4127, 2858, 2957, 942, 9814, 1911, 8874, 4068, 6327, 5063, 6739, 8672, 9691, 5088, 7465, 8937, 9340, 5063, 2155, 1720, 2736, 5115, 3973, 7636, 4050, 5153, 691, 398, 7281, 312, 166, 4372, 4241, 2104, 1185, 2317, 3491, 1009, 4901, 1383, 2120, 5881, 6778, 1831, 6470, 3945, 9365, 4292, 1458, 5442, 2195, 2477, 2087, 2877, 7968, 7488, 3450, 9781, 9056, 5238, 7698, 9392, 5162, 1108, 9168, 7978, 8558, 2373, 9355, 4664, 2745, 4457, 5225, 5732, 219, 1568, 7581, 1811, 3867, 5891, 436, 9660, 2530, 6170, 5591, 8685, 3645, 7946, 3343, 1832, 5578, 1952, 226, 8741, 2548, 2348, 860, 8978, 8480, 1813, 1350, 2812, 1162, 5926, 13, 2736, 9397, 5960, 5424, 9799, 8308, 8955, 8650, 3279, 9065, 9152, 6457, 8634, 1285, 8763, 5793, 8753, 5084, 7048, 5494, 2908, 9664, 7086, 6468, 8622, 6325, 6345, 7959, 5552, 6729, 1372, 8574, 5851, 5357, 1905, 9366, 8700, 9166, 789, 3453, 1867, 7648, 6139, 8326, 3530, 2541, 8566, 9286, 897, 3863, 9682, 9845, 8611, 5830, 120, 2589, 1210, 794, 7302, 1638, 738, 4046, 8448, 8451, 666, 7835, 9622, 1919, 7069, 1629, 1368, 260, 1905, 4604, 8801, 960, 7729, 7807, 1997, 1163, 2497, 3763, 8767, 8457, 9458, 6069, 7638, 8218, 6032, 6027, 6759, 6874, 9730, 3895, 9941, 5520, 5374, 1597, 4163, 5033, 4957, 7289, 3927, 5075, 8895, 7281, 2300, 4946, 7581, 171, 5102, 4499, 4941, 1352, 452, 7750, 9694, 225, 2031, 9836, 3380, 9612, 9902, 8112, 4121, 4323, 8999, 1753, 2147, 8173, 115, 6765, 6872, 638, 920, 5613, 2635, 4458, 2297, 1391, 1614, 8063, 4455, 1356, 2054, 9864, 2540, 6586, 3187, 6106, 677, 7948, 6702, 3261, 2986, 262, 2073, 1999, 2194, 3068, 2393, 7192, 1900, 1416, 2619, 3839, 4965, 1141, 670, 770, 248, 1636, 1096, 7792, 8984, 7584, 6810, 8573, 9941, 1256, 514, 5745, 9428, 9483, 8182, 2046, 6259, 4857, 6774, 324, 8060, 7757, 169, 1533], 5069793),
        ([5, 2, 2, 2], 9),
        ([2, 19, 6, 16, 5, 10, 7, 4, 11, 6], 84),
        ]
for nums, expected in data:
    real = s.maxSumDivThree(nums)
    if 10 < len(nums):
        print(f'{nums[:10]}..., expected {expected}, real {real}, result {expected == real}')
    else:
        print(f'{nums}, expected {expected}, real {real}, result {expected == real}')
