#   https://leetcode.com/problems/minimum-moves-to-equal-array-elements


class Solution:

    #   Time Limit Exceeded
    def minMoves0(self, nums):
        if nums is None or 0 == len(nums):
            return 0
        cnt = 0
        while 1 != len(set(nums)):
            nums.sort()
            for i in range(len(nums) - 1):
                nums[i] += 1
            print(nums)
            cnt += 1
        return cnt

    #   Time Limit Exceeded
    def minMoves1(self, nums):
        if nums is None or 0 == len(nums):
            return 0
        cnt = 0
        while 1 != len(set(nums)):
            minVal, minIdx, maxVal, maxIdx = nums[0], 0, nums[0], 0
            for i, n in enumerate(nums):
                if n < minVal:
                    minVal, minIdx = n, i
                elif maxVal < n:
                    maxVal, maxIdx = n, i
            diff = maxVal - minVal
            for i, n in enumerate(nums):
                if i != maxIdx:
                    nums[i] += diff
            print(nums)
            cnt += diff
        return cnt

    #   https://leetcode.com/problems/minimum-moves-to-equal-array-elements/discuss/121482/1-line-Python-solution-with-OK-performance(beats-80)
    #   https://leetcode.com/problems/minimum-moves-to-equal-array-elements/discuss/93817/It-is-a-math-question
    #   3.13%
    def minMoves(self, nums):
        return sum(nums) - len(nums) * min(nums)


s = Solution()
data = [([1, 2, 3], 3),
        ([1, 2, 3, 4], 6),
        ([1, 2147483647], 2147483646),
        ([-82,93,60,-48,-15,-8,49,-11,-46,-38,-72,-55,-88,-60,-59,-34,7,95,-47,-87,75,-36,-85,-53,65,-3,19,71,-48,28,-89,-29,-27,71,23,10,-84,-76,99,-30,-13,80,15,-49,-80,9,17,-20,-44,23,-55,83,87,-39,-69,53,58,50,-24,-90,-69,-13,-67,-44,-90,8,19,-74,33,-30,-52,72,-50,16,-77,-77,-75,-8,-45,-19,-85,0,-36,55,13,-53,-40,-77,50,36,86,33,75,-81,89,85,28,8,64,-87,31,64,85,81,-20,60,-96,5,-96,-89,38,-80,12,55,27,77,-98,87,-99,52,23,87,-15,-2,-94,-73,-65,-14,-13,51,-1,-82,16,-64,52,96,96,8,-46,-99,20,92,73,84,-1,0,61,2,-61,62,-94,62,49,-56,-88,8,-77,-53,94,-38,99,-6,-67,-33,30,85,-37,-21,-7,-31,-68,-87,-86,57,97,13,-91,11,67,-52,-27,74,-90,75,70,74,-17,45,-79,-71,-93,72,-25,-60,-61,-94,77,-45,-63,-29,24,-31,-64,38,78,86,-96,87,-3,71,-65,22,-3,97,-3,-33,71,32,64,44,62,24,-31,89,64,8,95,42,15,84,65,92,-95,-99,-18,83,87,-14,70,-64,-42,57,59,55,54,-92,75,-23,-7,39,-78,-45,-85,-9,96,80,51,92,-26,-81,28,-61,-89,34,92,-55,17,80,32,-60,68,90,97,27,-3,4,36,-28,33,-71,64,7,-64,79,98,-68,11,2,76,37,-27,5,76,-64,91,21,-19,8,-47,-87,48,-79,55,46,49,-95,-98,-63,-71,35,-82,93,-57,-94,25,93,90,88,-53,67,26,20,-76,-46,56,-85,27,90,-25,80,55,-76,-98,11,22,51,16,-24,40,45,-89,58,-9,-94,16,68,-100,6,8,99,-75,86,20,-51,93,-72,-84,20,70,-56,1,26,-32,3,89,42,-94,-43,70,-2,54,81,-92,-55,40,24,65,40,-70,-74,39,-44,-88,-89,-43,-95,92,-74,-22,62,-30,79,-60,-10,-66,-71,-68,-60,-14,-98,38,-59,35,-2,-62,-25,-78,56,67,-48,82,-41,-40,46,-30,-30,52,-86,-4,-70,29,66,61,69,-44,95,99,-60,87,-63,94,-23,-22,29,75,-31,57,97,-75,24,-99,-93,83,-38,5,-94,32,-91,72,80,91,1,46,52,-29,54,47,-78,94,34,-41,88,-89,38,-31,38,59,-74,35,84,3,37,43,-14,51,-52,-56,-65,-42,-83,-85,-51,18,61,54,41,15,-47,63,-39,88,-77,-51,51,13,18,-10,-28,-3,77,-92,-100,14,51,-62,-83,51,-17,-48,61,-48,-33,-89,70,80,17,-36,-53,70,-73,8,10,-98,9,-38,-33,80,4,39,-23,-67,-1,-71,0,-50,-33,17,54,2,22,15,54,41,-22,-23,22,95,41,21,66,20,82,-24,23,-57,-10,90,-77,46,-18,-48,80,81,-19,-20,84,1,97,38,-97,-29,-47,10,-87,32,87,-13,27,28,60,-7,-52,42,22,23,86,-88,14,61,59,48,-86,39,29,-53,71,13,48,20,-49,4,92,-43,-86,-95,89,-99,-8,-32,-19,-48,14,-19,47,-64,-95,-15,-100,-29,-54,59,-81,-40,-50,48,-40,-79,-86,-92,42,-83,12,-14,-26,-22,-9,-85,-21,35,-64,12,39,50,94,-62,38,99,23,38,-78,70,-50,-59,82,-48,41,-58,-74,7,-49,20,25,15,-94,99,94,-3,67,-75,84,-97,38,-25,53,32,14,-57,-17,-63,33,5,-93,35,-2,90,88,91,-68,-86,-1,-65,-14,-76,3,-8,75,-3,41,42,-26,25,-3,-88,-100,-98,44,14,-55,79,4,31,-64,11,-34,34,-47,-46,26,-62,-80,77,-75,6,-99,28,50,28,77,-9,-77,-48,68,20,-36,69,23,61,-65,20,40,-9,-49,77,55,18,-37,-92,24,41,98,-3,18,-76,55,-29,52,6,-100,30,49,-77,82,18,-5,98,-61,70,59,-74,-9,-48,18,-6,81,-27,64,-56,-67,-11,86,-68,38,-44,-92,-7,28,12,51,-20,-58,1,-45,76,-81,50,27,-90,21,-14,-64,64,38,54,-90,19,79,75,16,65,-84,-46,97,54,10,57,99,90,-31,51,-30,-36,-48,25,92,-77,-72,19,-67,1,-94,-79,-83,-4,28,-73,68,7,54,-16,-28,70,-10,-79,-24,-100,78,-72,91,-100,79,-87,-36,83,-9,-92,58,19,28,43,-80,-14,64,89,82,-8,-84,2,-100,71,38,-76,-7,-72,98,22,-71,76,50,72,28,-19,37,44,-36,-72,53,74,-1,-19,17,-29,67,-19,-40,1,74,-23,56,26,-100,-6,2,-55,23,0,19,52,-71,-31,-24,57,2,-87,2,66,94,-45,-8,-7,-12,-91,65,-93,-9,77,-40,-83,-46,-84,43,-94,11,-55,-96,-66,-2,23,38,27,93,66,-16,-53,31,38,-86,25,45,-42,71,-67,-32,-12,92,59,-35,-47,76,-28,-79,-29,-70,32,-32,-66,18,66,58,-92,-7,3,74,30,50,6,-32,16,83,-86,75,54,99,-57,-58,92,54,-40,97,-18,32,-82,5,62,3,73,97,-79,-8,7,-70], 99923),
        ]
for nums, expected in data:
    real = s.minMoves(nums)
    print('{}, expected {}, real {}, result {}'.format(nums, expected, real, expected == real))
'''
1 2 3
3 4 3 2 1 1 +2
4 4 4
6 - 3 * 1

1 2 3 4
4 5 6 4 +3
6 7 6 6 +2
10 - 4 * 1

1 2 3 3 4 4
4 5 6 6 7 4 +3
7 8 9 9 7 7 +3
9 10 11 9 9 9 +2
11 12 11 11 11 11 +2
'''
